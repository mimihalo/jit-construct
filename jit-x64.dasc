#include <stdint.h>
#include "util.h"

|.arch x64
|.actionlist actions
|
|// Use rbx as our cell pointer.
|// Since rbx is a callee-save register, it will be preserved
|// across our calls to getchar and putchar.
|.define PTR, rbx
|
|// Macro for calling a function.
|// In cases where our target is <=2**32 away we can use
|//   | call &addr
|// But since we don't know if it will be, we use this safe
|// sequence instead.
|.macro callp, addr
|  mov64  rax, (uintptr_t)addr
|  call   rax
|.endmacro

#define Dst &state
#define MAX_NESTING 256

int getMult(char *p);
int detect_zeroloop(char *p);
int detect_copyloop(char *p);
int check_cont(char *p,int num);

dasm_State *state;

int main(int argc, char *argv[])
{
    if (argc < 2) err("Usage: jit-x64 <inputfile>");
    
    initjit(&state, actions);

    unsigned int maxpc = 0;
    int pcstack[MAX_NESTING];
    int *top = pcstack, *limit = pcstack + MAX_NESTING;
    int mult=0;
	int mnum=0;

    // Function prologue.
    |  push PTR
    |  mov  PTR, rdi      // rdi store 1st argument
    char *p = read_file(argv[1]);
    while(*p) {
        switch (*p) {
            case '>':
                mult=getMult(p);
                p+=(mult-1);
                if(mult>1) {
                    |  add  PTR, mult
                } else {
                    |  inc  PTR
                }
                break;
            case '<':
                mult=getMult(p);
                p+=(mult-1);
                if(mult>1) {
                    |  sub  PTR, mult
                } else {
                    |  dec  PTR
                }
                break;
            case '+':
                mult=getMult(p);
                p+=(mult-1);
                if(mult>1) {
                    |  add  byte [PTR], mult
                } else {
                    |  inc  byte [PTR]
                }
                break;
            case '-':
                mult=getMult(p);
                p+=(mult-1);
                if(mult>1) {
                    |  sub  byte [PTR], mult
                } else {
                    |  dec  byte [PTR]
                }
                break;
            case '.':
                |  movzx edi, byte [PTR]
                |  callp putchar
                break;
            case ',':
                |  callp getchar
                |  mov   byte [PTR], al
                break;
            case '[':
				mnum=detect_zeroloop(p);
				if(mnum!=0)
				{
					p+=2;
					|  mov   byte [PTR], 0
				}else if((mnum=detect_copyloop(p))!=0)
				{
					p+=(mnum+1);
				}else
				{
					if (top == limit) err("Nesting too deep.");
					// Each loop gets two pclabels: at the beginning and end.
					// We store pclabel offsets in a stack to link the loop
					// begin and end together.
					maxpc += 2;
					*top++ = maxpc;
					dasm_growpc(&state, maxpc);
					|  cmp  byte [PTR], 0
					|  je   =>(maxpc-2)
					|=>(maxpc-1):
				}
                      break;
            case ']':
                if (top == pcstack) err("Unmatched ']'");
                top--;
                |  cmp  byte [PTR], 0
                |  jne  =>(*top-1)
                |=>(*top-2):
                      break;
        }
        p++;
    }

    // Function epilogue.
    |  pop  PTR
    |  ret

    void (*fptr)(char*) = jitcode(&state);
    char *mem = calloc(30000, 1);
    fptr(mem);
    free(mem);
    free_jitcode(fptr);
    return 0;
}


int getMult(char *p)
{
    char fc=*p;
    int res=0;
    while(*p) {
        if(*p==fc) {
            res++;
        } else {
            break;
        }
        p++;
    }
    return res;
}

int detect_zeroloop(char *p)
{
	p++;
	if(*p!='-')
		return 0;
	p++;
	if(*p!=']')
		return 0;
	
	return 1;
}

int detect_copyloop(char *p)
{
	char *start=p+1,*end=p;
	int pinc=0,pdec=0;
	int minc=0,mdec=0;
	int res;
	p++;
	if(*p!='-')
		return 0;
	while(*end!=']')
	{
		if(*end=='[')
			return 0;
		end++;
	}
	
	while(p!=end)
	{
		switch(*p)
		{
			case '>':
				pinc++;
				break;
			case '<':
				pdec++;
				break;
			case '+':
				minc++;
				break;
			case '-':
				mdec++;
				break;
			default:
				return 0;
		}
		p++;
	}
	res=pinc+pdec+minc+mdec+1;
	if(pinc!=pdec)
		return 0;
	if(minc>1 || mdec>1)
		return 0;
	
	p=start+1;
	if(*p=='>')
	{
		if(check_cont(p,pinc)!=0)
		{
			p+=pinc;
			if(*p=='+')
			{
				| mov   cl , byte [PTR]
				| add   byte [PTR+pinc], cl
				| mov   byte [PTR], 0
			}else
			{
				| mov   cl , byte [PTR]
				| sub   byte [PTR+pinc], cl
				| mov   byte [PTR], 0
			}
		}else
		{
			return 0;
		}
	}else if(*p=='<')
	{
		if(check_cont(p,pinc)!=0)
		{
			p+=pinc;
			if(*p=='+')
			{
				| mov   cl , byte [PTR]
				| add   byte [PTR-pinc], cl
				| mov   byte [PTR], 0
			}else
			{
				| mov   cl , byte [PTR]
				| sub   byte [PTR-pinc], cl
				| mov   byte [PTR], 0
			}
		}else
		{
			return 0;
		}
	}
	
	return res;
}

int check_cont(char *p,int num)
{
	char fc=*p;
	for(int i=0;i<num;i++)
	{
		if(*p!=fc)
			return 0;
		p++;
	}
	return 1;
}